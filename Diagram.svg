<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="561px" height="10641px" viewBox="-0.5 -0.5 561 10641" content="&lt;mxfile host=&quot;drawio-plugin&quot; modified=&quot;2023-04-06T22:10:46.729Z&quot; agent=&quot;5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36&quot; etag=&quot;ZEuYIIVco-0yCf8DJUn9&quot; version=&quot;20.5.3&quot; type=&quot;embed&quot;&gt;&lt;diagram id=&quot;23iRSUPoRavnBvh4doch&quot; name=&quot;Page-1&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;"><defs/><g><rect x="0" y="0" width="560" height="10640" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 558px; height: 1px; padding-top: 7px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">import tkinter as tk<br />from tkinter import *<br />import cv2<br />import csv<br />import os<br />import numpy as np<br />from PIL import Image,ImageTk<br />import pandas as pd<br />import datetime<br />import time<br /><br />#####Window is our Main frame of system<br />window = tk.Tk()<br />window.title("FAMS-Face Recognition Based Attendance Management System")<br /><br />window.geometry('1280x720')<br />window.configure(background='snow')<br /><br />####GUI for manually fill attendance<br /><br />def manually_fill():<br />    global sb<br />    sb = tk.Tk()<br />    sb.iconbitmap('AMS.ico')<br />    sb.title("Enter subject name...")<br />    sb.geometry('580x320')<br />    sb.configure(background='snow')<br /><br />    def err_screen_for_subject():<br /><br />        def ec_delete():<br />            ec.destroy()<br />        global ec<br />        ec = tk.Tk()<br />        ec.geometry('300x100')<br />        ec.iconbitmap('AMS.ico')<br />        ec.title('Warning!!')<br />        ec.configure(background='snow')<br />        Label(ec, text='Please enter your subject name!!!', fg='red', bg='white', font=('times', 16, ' bold ')).pack()<br />        Button(ec, text='OK', command=ec_delete, fg="black", bg="lawn green", width=9, height=1, activebackground="Red",<br />               font=('times', 15, ' bold ')).place(x=90, y=50)<br /><br />    def fill_attendance():<br />        ts = time.time()<br />        Date = datetime.datetime.fromtimestamp(ts).strftime('%Y_%m_%d')<br />        timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')<br />        Time = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')<br />        Hour, Minute, Second = timeStamp.split(":")<br />        ####Creatting csv of attendance<br /><br />        ##Create table for Attendance<br />        date_for_DB = datetime.datetime.fromtimestamp(ts).strftime('%Y_%m_%d')<br />        global subb<br />        subb=SUB_ENTRY.get()<br />        DB_table_name = str(subb + "_" + Date + "_Time_" + Hour + "_" + Minute + "_" + Second)<br />        #DB_table_name = str(subb)<br /><br />        import pymysql.connections<br /><br />        ###Connect to the database<br />        try:<br />            global cursor<br />            connection = pymysql.connect(host='localhost', user='root', password='root', db='manually_fill_attendance')<br />            cursor = connection.cursor()<br />        except Exception as e:<br />            print(e+"1")<br /><br />        sql = "CREATE TABLE " + DB_table_name + """<br />                        (ID INT NOT NULL AUTO_INCREMENT,<br />                         ENROLLMENT varchar(100) NOT NULL,<br />                         NAME VARCHAR(50) NOT NULL,<br />                         DATE VARCHAR(20) NOT NULL,<br />                         TIME VARCHAR(20) NOT NULL,<br />                             PRIMARY KEY (ID)<br />                             );<br />                        """<br /><br /><br />        try:<br />            check_tables = "SHOW TABLES"<br />            cursor.execute(check_tables)<br />            tables = [row[0] for row in cursor.fetchall()]<br />            if DB_table_name.lower() not in tables:<br />                cursor.execute(sql)  ##for create a table<br />                print(DB_table_name+ " Created")<br />            else:<br />                print(DB_table_name+" Already exists")<br />            connection.commit()<br />        except Exception as ex:<br />            print(ex+"2")  #<br /><br />        '''finally:<br />            # close the database connection<br />            connection.close()<br />'''<br />        if subb=='':<br />            err_screen_for_subject()<br />        else:<br />            sb.destroy()<br />            MFW = tk.Tk()<br />            MFW.iconbitmap('AMS.ico')<br />            MFW.title("Manually attendance of "+ str(subb))<br />            MFW.geometry('880x470')<br />            MFW.configure(background='snow')<br /><br />            def del_errsc2():<br />                errsc2.destroy()<br /><br />            def err_screen1():<br />                global errsc2<br />                errsc2 = tk.Tk()<br />                errsc2.geometry('330x100')<br />                errsc2.iconbitmap('AMS.ico')<br />                errsc2.title('Warning!!')<br />                errsc2.configure(background='snow')<br />                Label(errsc2, text='Please enter Student &amp; Enrollment!!!', fg='red', bg='white',<br />                      font=('times', 16, ' bold ')).pack()<br />                Button(errsc2, text='OK', command=del_errsc2, fg="black", bg="lawn green", width=9, height=1,<br />                       activebackground="Red", font=('times', 15, ' bold ')).place(x=90, y=50)<br /><br />            def testVal(inStr, acttyp):<br />                if acttyp == '1':  # insert<br />                    if not inStr.isdigit():<br />                        return False<br />                return True<br /><br />            ENR = tk.Label(MFW, text="Enter Enrollment", width=15, height=2, fg="white", bg="blue2",<br />                           font=('times', 15, ' bold '))<br />            ENR.place(x=30, y=100)<br /><br />            STU_NAME = tk.Label(MFW, text="Enter Student name", width=15, height=2, fg="white", bg="blue2",<br />                                font=('times', 15, ' bold '))<br />            STU_NAME.place(x=30, y=200)<br /><br />            global ENR_ENTRY<br />            ENR_ENTRY = tk.Entry(MFW, width=20,validate='key', bg="yellow", fg="red", font=('times', 23, ' bold '))<br />            ENR_ENTRY['validatecommand'] = (ENR_ENTRY.register(testVal), '%P', '%d')<br />            ENR_ENTRY.place(x=290, y=105)<br /><br />            def remove_enr():<br />                ENR_ENTRY.delete(first=0, last=22)<br /><br />            STUDENT_ENTRY = tk.Entry(MFW, width=20, bg="yellow", fg="red", font=('times', 23, ' bold '))<br />            STUDENT_ENTRY.place(x=290, y=205)<br /><br />            def remove_student():<br />                STUDENT_ENTRY.delete(first=0, last=22)<br /><br />            ####get important variable<br />            def enter_data_DB():<br />                ENROLLMENT = ENR_ENTRY.get()<br />                STUDENT = STUDENT_ENTRY.get()<br />                if ENROLLMENT=='':<br />                    err_screen1()<br />                elif STUDENT=='':<br />                    err_screen1()<br />                else:<br />                    time = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')<br />                    Hour, Minute, Second = time.split(":")<br />                    Insert_data = "INSERT INTO " + DB_table_name + " (ID,ENROLLMENT,NAME,DATE,TIME) VALUES (0, %s, %s, %s,%s)"<br />                    VALUES = (str(ENROLLMENT), str(STUDENT), str(Date), str(time))<br />                    try:<br />                        cursor.execute(Insert_data, VALUES)<br />                        #cursor.commit()<br />                    except Exception as e:<br />                        print(e+'3')<br />                    ENR_ENTRY.delete(first=0, last=22)<br />                    STUDENT_ENTRY.delete(first=0, last=22)<br /><br />            def create_csv():<br />                import csv<br />                cursor.execute("select * from " + DB_table_name + ";")<br />                csv_name='C:/Users/sheri/Desktop/LambtonCollege/AML 2404 AI and ML Lab/Attendace_management_system-master/Attendance/Manually Attendance/'+DB_table_name+'.csv'<br />                with open(csv_name, "w") as csv_file:<br />                    csv_writer = csv.writer(csv_file)<br />                    csv_writer.writerow([i[0] for i in cursor.description])  # write headers<br />                    csv_writer.writerows(cursor)<br />                    O="CSV created Successfully"<br />                    Notifi.configure(text=O, bg="Green", fg="white", width=33, font=('times', 19, 'bold'))<br />                    Notifi.place(x=180, y=380)<br />                import csv<br />                import tkinter<br />                root = tkinter.Tk()<br />                root.title("Attendance of " + subb)<br />                root.configure(background='snow')<br />                with open(csv_name, newline="") as file:<br />                    reader = csv.reader(file)<br />                    r = 0<br /><br />                    for col in reader:<br />                        c = 0<br />                        for row in col:<br />                            # i've added some styling<br />                            label = tkinter.Label(root, width=13, height=1, fg="black", font=('times', 13, ' bold '),<br />                                                  bg="lawn green", text=row, relief=tkinter.RIDGE)<br />                            label.grid(row=r, column=c)<br />                            c += 1<br />                        r += 1<br />                root.mainloop()<br /><br />            Notifi = tk.Label(MFW, text="CSV created Successfully", bg="Green", fg="white", width=33,<br />                                height=2, font=('times', 19, 'bold'))<br /><br /><br />            c1ear_enroll = tk.Button(MFW, text="Clear", command=remove_enr, fg="black", bg="deep pink", width=10,<br />                                     height=1,<br />                                     activebackground="Red", font=('times', 15, ' bold '))<br />            c1ear_enroll.place(x=690, y=100)<br /><br />            c1ear_student = tk.Button(MFW, text="Clear", command=remove_student, fg="black", bg="deep pink", width=10,<br />                                      height=1,<br />                                      activebackground="Red", font=('times', 15, ' bold '))<br />            c1ear_student.place(x=690, y=200)<br /><br />            DATA_SUB = tk.Button(MFW, text="Enter Data",command=enter_data_DB, fg="black", bg="lime green", width=20,<br />                                 height=2,<br />                                 activebackground="Red", font=('times', 15, ' bold '))<br />            DATA_SUB.place(x=170, y=300)<br /><br />            MAKE_CSV = tk.Button(MFW, text="Convert to CSV",command=create_csv, fg="black", bg="red", width=20,<br />                                 height=2,<br />                                 activebackground="Red", font=('times', 15, ' bold '))<br />            MAKE_CSV.place(x=570, y=300)<br /><br />            def attf():<br />                import subprocess<br />                subprocess.Popen(r'explorer /select,"C:\Users\sheri\Desktop\LambtonCollege\AML 2404 AI and ML Lab\Attendace_management_system-master\Attendance\Manually Attendance\"')<br /><br />            attf = tk.Button(MFW,  text="Check Sheets",command=attf,fg="black"  ,bg="lawn green"  ,width=12  ,height=1 ,activebackground = "Red" ,font=('times', 14, ' bold '))<br />            attf.place(x=730, y=410)<br /><br />            MFW.mainloop()<br /><br /><br />    SUB = tk.Label(sb, text="Enter Subject", width=15, height=2, fg="white", bg="blue2", font=('times', 15, ' bold '))<br />    SUB.place(x=30, y=100)<br /><br />    global SUB_ENTRY<br /><br />    SUB_ENTRY = tk.Entry(sb, width=20, bg="yellow", fg="red", font=('times', 23, ' bold '))<br />    SUB_ENTRY.place(x=250, y=105)<br /><br />    fill_manual_attendance = tk.Button(sb, text="Fill Attendance",command=fill_attendance, fg="white", bg="deep pink", width=20, height=2,<br />                       activebackground="Red", font=('times', 15, ' bold '))<br />    fill_manual_attendance.place(x=250, y=160)<br />    sb.mainloop()<br /><br />##For clear textbox<br />def clear():<br />    txt.delete(first=0, last=22)<br /><br />def clear1():<br />    txt2.delete(first=0, last=22)<br />def del_sc1():<br />    sc1.destroy()<br />def err_screen():<br />    global sc1<br />    sc1 = tk.Tk()<br />    sc1.geometry('300x100')<br />    sc1.iconbitmap('AMS.ico')<br />    sc1.title('Warning!!')<br />    sc1.configure(background='snow')<br />    Label(sc1,text='Enrollment &amp; Name required!!!',fg='red',bg='white',font=('times', 16, ' bold ')).pack()<br />    Button(sc1,text='OK',command=del_sc1,fg="black"  ,bg="lawn green"  ,width=9  ,height=1, activebackground = "Red" ,font=('times', 15, ' bold ')).place(x=90,y= 50)<br /><br />##Error screen2<br />def del_sc2():<br />    sc2.destroy()<br />def err_screen1():<br />    global sc2<br />    sc2 = tk.Tk()<br />    sc2.geometry('300x100')<br />    sc2.iconbitmap('AMS.ico')<br />    sc2.title('Warning!!')<br />    sc2.configure(background='snow')<br />    Label(sc2,text='Please enter your subject name!!!',fg='red',bg='white',font=('times', 16, ' bold ')).pack()<br />    Button(sc2,text='OK',command=del_sc2,fg="black"  ,bg="lawn green"  ,width=9  ,height=1, activebackground = "Red" ,font=('times', 15, ' bold ')).place(x=90,y= 50)<br /><br />###For take images for datasets<br />def take_img():<br />    l1 = txt.get()<br />    l2 = txt2.get()<br />    if l1 == '':<br />        err_screen()<br />    elif l2 == '':<br />        err_screen()<br />    else:<br />        try:<br />            cam = cv2.VideoCapture(0)<br />            detector = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')<br />            Enrollment = txt.get()<br />            Name = txt2.get()<br />            sampleNum = 0<br />            while (True):<br />                ret, img = cam.read()<br />                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br />                faces = detector.detectMultiScale(gray, 1.3, 5)<br />                for (x, y, w, h) in faces:<br />                    cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)<br />                    # incrementing sample number<br />                    sampleNum = sampleNum + 1<br />                    # saving the captured face in the dataset folder<br />                    cv2.imwrite("TrainingImage/ " + Name + "." + Enrollment + '.' + str(sampleNum) + ".jpg",<br />                                gray[y:y + h, x:x + w])<br />                    cv2.imshow('Frame', img)<br />                # wait for 100 miliseconds<br />                if cv2.waitKey(1) &amp; 0xFF == ord('q'):<br />                    break<br />                # break if the sample number is morethan 100<br />                elif sampleNum &gt; 70:<br />                    break<br />            cam.release()<br />            cv2.destroyAllWindows()<br />            ts = time.time()<br />            Date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')<br />            Time = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')<br />            row = [Enrollment, Name, Date, Time]<br />            with open('StudentDetails\StudentDetails.csv', 'a+') as csvFile:<br />                writer = csv.writer(csvFile, delimiter=',')<br />                writer.writerow(row)<br />                csvFile.close()<br />            res = "Images Saved for Enrollment : " + Enrollment + " Name : " + Name<br />            Notification.configure(text=res, bg="SpringGreen3", width=50, font=('times', 18, 'bold'))<br />            Notification.place(x=250, y=400)<br />        except FileExistsError as F:<br />            f = 'Student Data already exists'<br />            Notification.configure(text=f, bg="Red", width=21)<br />            Notification.place(x=450, y=400)<br /><br /><br />###for choose subject and fill attendance<br />def subjectchoose():<br />    def Fillattendances():<br />        sub=tx.get()<br />        now = time.time()  ###For calculate seconds of video<br />        future = now + 20<br />        if time.time() &lt; future:<br />            if sub == '':<br />                err_screen1()<br />            else:<br />                recognizer = cv2.face.LBPHFaceRecognizer_create()  # cv2.createLBPHFaceRecognizer()<br />                try:<br />                    recognizer.read("TrainingImageLabel\Trainner.yml")<br />                except:<br />                    e = 'Model not found,Please train model'<br />                    Notifica.configure(text=e, bg="red", fg="black", width=33, font=('times', 15, 'bold'))<br />                    Notifica.place(x=20, y=250)<br /><br />                harcascadePath = "haarcascade_frontalface_default.xml"<br />                faceCascade = cv2.CascadeClassifier(harcascadePath)<br />                df = pd.read_csv("StudentDetails\StudentDetails.csv")<br />                cam = cv2.VideoCapture(0)<br />                font = cv2.FONT_HERSHEY_SIMPLEX<br />                col_names = ['Enrollment', 'Name', 'Date', 'Time']<br />                attendance = pd.DataFrame(columns=col_names)<br />                while True:<br />                    ret, im = cam.read()<br />                    gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)<br />                    faces = faceCascade.detectMultiScale(gray, 1.2, 5)<br />                    for (x, y, w, h) in faces:<br />                        global Id<br /><br />                        Id, conf = recognizer.predict(gray[y:y + h, x:x + w])<br />                        if (conf &lt;70):<br />                            print(conf)<br />                            global Subject<br />                            global aa<br />                            global date<br />                            global timeStamp<br />                            Subject = tx.get()<br />                            ts = time.time()<br />                            date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')<br />                            timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')<br />                            aa = df.loc[df['Enrollment'] == Id]['Name'].values<br />                            global tt<br />                            tt = str(Id) + "-" + aa<br />                            En = '15624031' + str(Id)<br />                            attendance.loc[len(attendance)] = [Id, aa, date, timeStamp]<br />                            cv2.rectangle(im, (x, y), (x + w, y + h), (0, 260, 0), 7)<br />                            cv2.putText(im, str(tt), (x + h, y), font, 1, (255, 255, 0,), 4)<br /><br />                        else:<br />                            Id = 'Unknown'<br />                            tt = str(Id)<br />                            cv2.rectangle(im, (x, y), (x + w, y + h), (0, 25, 255), 7)<br />                            cv2.putText(im, str(tt), (x + h, y), font, 1, (0, 25, 255), 4)<br />                    if time.time() &gt; future:<br />                        break<br /><br />                    attendance = attendance.drop_duplicates(['Enrollment'], keep='first')<br />                    cv2.imshow('Filling attedance..', im)<br />                    key = cv2.waitKey(30) &amp; 0xff<br />                    if key == 27:<br />                        break<br /><br />                ts = time.time()<br />                date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')<br />                timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')<br />                Hour, Minute, Second = timeStamp.split(":")<br />                #fileName = "Attendance/" + Subject + "_" + date + "_" + Hour + "-" + Minute + "-" + Second + ".csv"<br />                fileName = "Attendance/" + Subject+".csv"<br />                attendance = attendance.drop_duplicates(['Enrollment'], keep='first')<br />                print(attendance)<br />                attendance.to_csv(fileName, index=False)<br /><br />                ##Create table for Attendance<br />                date_for_DB = datetime.datetime.fromtimestamp(ts).strftime('%Y_%m_%d')<br />                #DB_Table_name = str( Subject + "_" + date_for_DB + "_Time_" + Hour + "_" + Minute + "_" + Second)<br />                DB_Table_name = str(Subject)<br />                import pymysql.connections<br /><br />                ###Connect to the database<br />                try:<br />                    global cursor<br />                    #db=Face_reco_fill<br />                    connection = pymysql.connect(host='localhost', user='root', password='root', db='manually_fill_attendance')<br />                    cursor = connection.cursor()<br />                except Exception as e:<br />                    print(e+'4')<br /><br />                sql = "CREATE TABLE " + DB_Table_name + """<br />                (ID INT NOT NULL AUTO_INCREMENT,<br />                 ENROLLMENT varchar(100) NOT NULL,<br />                 NAME VARCHAR(50) NOT NULL,<br />                 DATE VARCHAR(20) NOT NULL,<br />                 TIME VARCHAR(20) NOT NULL,<br />                     PRIMARY KEY (ID)<br />                     );<br />                """<br />                ####Now enter attendance in Database<br />                insert_data =  "INSERT INTO " + DB_Table_name + " (ID,ENROLLMENT,NAME,DATE,TIME) VALUES (0, %s, %s, %s,%s)"<br />                VALUES = (str(Id), str(aa), str(date), str(timeStamp))<br />                try:<br />                    check_tables = "SHOW TABLES"<br />                    cursor.execute(check_tables)<br />                    tables = [row[0] for row in cursor.fetchall()]<br />                    if str(Subject).lower() not in tables:<br />                        cursor.execute(sql)  ##for create a table<br />                    cursor.execute(insert_data, VALUES)##For insert data into table<br />                    connection.commit()<br /><br />                except Exception as ex:<br />                    print(ex+'5')  #<br /><br />                '''finally:<br />                    # close the database connection<br />                    connection.close()<br />'''<br />                M = 'Attendance filled Successfully'<br />                Notifica.configure(text=M, bg="Green", fg="white", width=33, font=('times', 15, 'bold'))<br />                Notifica.place(x=20, y=250)<br /><br />                cam.release()<br />                cv2.destroyAllWindows()<br /><br />                import csv<br />                import tkinter<br />                root = tkinter.Tk()<br />                root.title("Attendance of " + Subject)<br />                root.configure(background='snow')<br />                cs = 'C:/Users/sheri/Desktop/LambtonCollege/AML 2404 AI and ML Lab/Attendace_management_system-master/' + fileName<br />            root.mainloop()<br />            with open(cs, newline="") as file:<br />                reader = csv.reader(file)<br />                r = 0<br /><br />                for col in reader:<br />                    c = 0<br />                    for row in col:<br />                        # i've added some styling<br />                        label = tkinter.Label(root, width=8, height=1, fg="black", font=('times', 15, ' bold '),<br />                                              bg="lawn green", text=row, relief=tkinter.RIDGE)<br />                        label.grid(row=r, column=c)<br />                        c += 1<br />                    r += 1<br />            print(attendance)<br /><br /><br />    ###windo is frame for subject chooser<br />    windo = tk.Tk()<br />    windo.iconbitmap('AMS.ico')<br />    windo.title("Enter subject name...")<br />    windo.geometry('580x320')<br />    windo.configure(background='snow')<br />    Notifica = tk.Label(windo, text="Attendance filled Successfully", bg="Green", fg="white", width=33,<br />                            height=2, font=('times', 15, 'bold'))<br /><br />    def Attf():<br />        import subprocess<br />        subprocess.Popen(r'explorer /select,"C:\Users\sheri\Desktop\LambtonCollege\AML 2404 AI and ML Lab\Attendace_management_system-master\Attendance\"')<br /><br />    attf = tk.Button(windo,  text="Check Sheets",command=Attf,fg="black"  ,bg="lawn green"  ,width=12  ,height=1 ,activebackground = "Red" ,font=('times', 14, ' bold '))<br />    attf.place(x=430, y=255)<br /><br />    sub = tk.Label(windo, text="Enter Subject", width=15, height=2, fg="white", bg="blue2", font=('times', 15, ' bold '))<br />    sub.place(x=30, y=100)<br /><br />    tx = tk.Entry(windo, width=20, bg="yellow", fg="red", font=('times', 23, ' bold '))<br />    tx.place(x=250, y=105)<br /><br />    fill_a = tk.Button(windo, text="Fill Attendance", fg="white",command=Fillattendances, bg="deep pink", width=20, height=2,<br />                       activebackground="Red", font=('times', 15, ' bold '))<br />    fill_a.place(x=250, y=160)<br />    windo.mainloop()<br /><br />def admin_panel():<br />    win = tk.Tk()<br />    win.iconbitmap('AMS.ico')<br />    win.title("LogIn")<br />    win.geometry('880x420')<br />    win.configure(background='snow')<br /><br />    def log_in():<br />        username = un_entr.get()<br />        password = pw_entr.get()<br /><br />        if username == 'admin' :<br />            if password == 'admin':<br />                win.destroy()<br />                import csv<br />                import tkinter<br />                root = tkinter.Tk()<br />                root.title("Student Details")<br />                root.configure(background='snow')<br /><br />                cs = 'C:/Users/sheri/Desktop/LambtonCollege/AML 2404 AI and ML Lab/Attendace_management_system-master/StudentDetails/StudentDetails.csv'<br />                with open(cs, newline="") as file:<br />                    reader = csv.reader(file)<br />                    r = 0<br /><br />                    for col in reader:<br />                        c = 0<br />                        for row in col:<br />                            # i've added some styling<br />                            label = tkinter.Label(root, width=8, height=1, fg="black", font=('times', 15, ' bold '),<br />                                                  bg="lawn green", text=row, relief=tkinter.RIDGE)<br />                            label.grid(row=r, column=c)<br />                            c += 1<br />                        r += 1<br />                root.mainloop()<br />            else:<br />                valid = 'Incorrect ID or Password'<br />                Nt.configure(text=valid, bg="red", fg="black", width=38, font=('times', 19, 'bold'))<br />                Nt.place(x=120, y=350)<br /><br />        else:<br />            valid ='Incorrect ID or Password'<br />            Nt.configure(text=valid, bg="red", fg="black", width=38, font=('times', 19, 'bold'))<br />            Nt.place(x=120, y=350)<br /><br /><br />    Nt = tk.Label(win, text="Attendance filled Successfully", bg="Green", fg="white", width=40,<br />                  height=2, font=('times', 19, 'bold'))<br />    # Nt.place(x=120, y=350)<br /><br />    un = tk.Label(win, text="Enter username", width=15, height=2, fg="white", bg="blue2",<br />                   font=('times', 15, ' bold '))<br />    un.place(x=30, y=50)<br /><br />    pw = tk.Label(win, text="Enter password", width=15, height=2, fg="white", bg="blue2",<br />                  font=('times', 15, ' bold '))<br />    pw.place(x=30, y=150)<br /><br />    def c00():<br />        un_entr.delete(first=0, last=22)<br /><br />    un_entr = tk.Entry(win, width=20, bg="yellow", fg="red", font=('times', 23, ' bold '))<br />    un_entr.place(x=290, y=55)<br /><br />    def c11():<br />        pw_entr.delete(first=0, last=22)<br /><br />    pw_entr = tk.Entry(win, width=20,show="*", bg="yellow", fg="red", font=('times', 23, ' bold '))<br />    pw_entr.place(x=290, y=155)<br /><br />    c0 = tk.Button(win, text="Clear", command=c00, fg="black", bg="deep pink", width=10, height=1,<br />                            activebackground="Red", font=('times', 15, ' bold '))<br />    c0.place(x=690, y=55)<br /><br />    c1 = tk.Button(win, text="Clear", command=c11, fg="black", bg="deep pink", width=10, height=1,<br />                   activebackground="Red", font=('times', 15, ' bold '))<br />    c1.place(x=690, y=155)<br /><br />    Login = tk.Button(win, text="LogIn", fg="black", bg="lime green", width=20,<br />                       height=2,<br />                       activebackground="Red",command=log_in, font=('times', 15, ' bold '))<br />    Login.place(x=290, y=250)<br />    win.mainloop()<br /><br /><br />###For train the model<br />def trainimg():<br />    recognizer = cv2.face.LBPHFaceRecognizer_create()<br />    global detector<br />    detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")<br />    try:<br />        global faces,Id<br />        faces, Id = getImagesAndLabels("TrainingImage")<br />    except Exception as e:<br />        l='please make "TrainingImage" folder &amp; put Images'<br />        Notification.configure(text=l, bg="SpringGreen3", width=50, font=('times', 18, 'bold'))<br />        Notification.place(x=350, y=400)<br /><br />    recognizer.train(faces, np.array(Id))<br />    try:<br />        recognizer.save("TrainingImageLabel\Trainner.yml")<br />    except Exception as e:<br />        q='Please make "TrainingImageLabel" folder'<br />        Notification.configure(text=q, bg="SpringGreen3", width=50, font=('times', 18, 'bold'))<br />        Notification.place(x=350, y=400)<br /><br />    res = "Model Trained"  # +",".join(str(f) for f in Id)<br />    Notification.configure(text=res, bg="SpringGreen3", width=50, font=('times', 18, 'bold'))<br />    Notification.place(x=250, y=400)<br /><br />def getImagesAndLabels(path):<br />    imagePaths = [os.path.join(path, f) for f in os.listdir(path)]<br />    # create empth face list<br />    faceSamples = []<br />    # create empty ID list<br />    Ids = []<br />    # now looping through all the image paths and loading the Ids and the images<br />    for imagePath in imagePaths:<br />        # loading the image and converting it to gray scale<br />        pilImage = Image.open(imagePath).convert('L')<br />        # Now we are converting the PIL image into numpy array<br />        imageNp = np.array(pilImage, 'uint8')<br />        # getting the Id from the image<br /><br />        Id = int(os.path.split(imagePath)[-1].split(".")[1])<br />        # extract the face from the training image sample<br />        faces = detector.detectMultiScale(imageNp)<br />        # If a face is there then append that in the list as well as Id of it<br />        for (x, y, w, h) in faces:<br />            faceSamples.append(imageNp[y:y + h, x:x + w])<br />            Ids.append(Id)<br />    return faceSamples, Ids<br /><br />window.grid_rowconfigure(0, weight=1)<br />window.grid_columnconfigure(0, weight=1)<br />window.iconbitmap('AMS.ico')<br /><br />def on_closing():<br />    from tkinter import messagebox<br />    if messagebox.askokcancel("Quit", "Do you want to quit?"):<br />        window.destroy()<br />window.protocol("WM_DELETE_WINDOW", on_closing)<br /><br />message = tk.Label(window, text="Face-Recognition-Based-Attendance-Management-System", bg="cyan", fg="black", width=50,<br />                   height=2, font=('times', 28, 'italic bold '))<br /><br />message.place(x=80, y=20)<br /><br />Notification = tk.Label(window, text="All things good", bg="Green", fg="white", width=15,<br />                      height=3, font=('times', 17, 'bold'))<br /><br />lbl = tk.Label(window, text="Enter Enrollment", width=20, height=2, fg="black", bg="deep pink", font=('times', 15, ' bold '))<br />lbl.place(x=200, y=200)<br /><br />def testVal(inStr,acttyp):<br />    if acttyp == '1': #insert<br />        if not inStr.isdigit():<br />            return False<br />    return True<br /><br />txt = tk.Entry(window, validate="key", width=20, bg="yellow", fg="red", font=('times', 25, ' bold '))<br />txt['validatecommand'] = (txt.register(testVal),'%P','%d')<br />txt.place(x=550, y=210)<br /><br />lbl2 = tk.Label(window, text="Enter Name", width=20, fg="black", bg="deep pink", height=2, font=('times', 15, ' bold '))<br />lbl2.place(x=200, y=300)<br /><br />txt2 = tk.Entry(window, width=20, bg="yellow", fg="red", font=('times', 25, ' bold '))<br />txt2.place(x=550, y=310)<br /><br />clearButton = tk.Button(window, text="Clear",command=clear,fg="black"  ,bg="deep pink"  ,width=10  ,height=1 ,activebackground = "Red" ,font=('times', 15, ' bold '))<br />clearButton.place(x=950, y=210)<br /><br />clearButton1 = tk.Button(window, text="Clear",command=clear1,fg="black"  ,bg="deep pink"  ,width=10 ,height=1, activebackground = "Red" ,font=('times', 15, ' bold '))<br />clearButton1.place(x=950, y=310)<br /><br />AP = tk.Button(window, text="Check Register students",command=admin_panel,fg="black"  ,bg="cyan"  ,width=19 ,height=1, activebackground = "Red" ,font=('times', 15, ' bold '))<br />AP.place(x=990, y=410)<br /><br />takeImg = tk.Button(window, text="Take Images",command=take_img,fg="white"  ,bg="blue2"  ,width=20  ,height=3, activebackground = "Red" ,font=('times', 15, ' bold '))<br />takeImg.place(x=90, y=500)<br /><br />trainImg = tk.Button(window, text="Train Images",fg="black",command=trainimg ,bg="lawn green"  ,width=20  ,height=3, activebackground = "Red" ,font=('times', 15, ' bold '))<br />trainImg.place(x=390, y=500)<br /><br />FA = tk.Button(window, text="Automatic Attendace",fg="white",command=subjectchoose  ,bg="blue2"  ,width=20  ,height=3, activebackground = "Red" ,font=('times', 15, ' bold '))<br />FA.place(x=690, y=500)<br /><br />quitWindow = tk.Button(window, text="Manually Fill Attendance", command=manually_fill  ,fg="black"  ,bg="lawn green"  ,width=20  ,height=3, activebackground = "Red" ,font=('times', 15, ' bold '))<br />quitWindow.place(x=990, y=500)<br /><br />window.mainloop()</div></div></div></foreignObject><text x="2" y="19" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">import tkinter as tk...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>